name: Deploy to Production

on:
  push:
    branches: [ master ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      # 1. Checkout du code
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1

      # 2. Configuration de Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      # 3. Mise √† jour de la version
      - name: Update version
        run: |
          VERSION=$(cat public/version.txt)
          echo "APP_VERSION=$VERSION" >> $GITHUB_ENV
          echo "DEPLOY_ID=$(date +%Y%m%d_%H%M%S)" >> $GITHUB_ENV

      # 4. Installation des d√©pendances
      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      # 5. Build de l'application
      - name: Build application
        env:
          NUXT_PUBLIC_VERSION: ${{ env.APP_VERSION }}
        run: npm run generate

      # 6. Pr√©paration des fichiers (compression uniquement si n√©cessaire)
      - name: Prepare files for deployment
        run: |
          cd .output/public
          for file in $(find . -type f \( -name "*.html" -o -name "*.js" -o -name "*.css" -o -name "*.svg" \)); do
            if [[ ! -f "$file.gz" ]]; then
              gzip -9 -k "$file"
            fi
          done

      # 7. Cr√©ation du r√©pertoire de release
      - name: Create release directory structure
        run: |
          mkdir -p deploy/releases/${{ env.DEPLOY_ID }}
          cp -r .output/public/* deploy/releases/${{ env.DEPLOY_ID }}/
          
      # 8. D√©ploiement vers le r√©pertoire de release
      - name: Deploy to release directory
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          local-dir: ./deploy/
          server-dir: /
          exclude: |
            **/.git*
            **/.git*/**
            **/node_modules/**
          log-level: minimal

      # 9. Cr√©ation du script de bascule
      - name: Create switch script
        run: |
          echo "<?php
          ini_set('display_errors', 1);
          error_reporting(E_ALL);
          set_time_limit(300);
          
          \$deployId = '${{ env.DEPLOY_ID }}';
          \$releasesDir = '/releases';
          \$currentLink = '/current';
          \$newRelease = \$releasesDir . '/' . \$deployId;
          
          echo \"Starting deployment process...\\n\";
          
          // 1. V√©rifier si le nouveau release existe
          if (!is_dir(\$newRelease)) {
              die(\"Error: New release directory not found: {\$newRelease}\\n\");
          }
          echo \" New release found\\n\";
          
          // 2. Cr√©er le lien symbolique temporaire
          \$tempLink = \$currentLink . '_' . \$deployId;
          @unlink(\$tempLink);
          
          if (!symlink(\$newRelease, \$tempLink)) {
              die(\"Error: Failed to create temporary symlink\\n\");
          }
          echo \" Temporary symlink created\\n\";
          
          // 3. Faire la bascule atomique
          if (!@rename(\$tempLink, \$currentLink)) {
              @unlink(\$tempLink);
              die(\"Error: Failed to switch symlink\\n\");
          }
          echo \" Symlink switched successfully\\n\";
          
          // 4. Mettre √† jour le .htaccess
          \$htaccess = <<<EOT
          <IfModule mod_rewrite.c>
              RewriteEngine On
              RewriteBase /
              
              # Ne pas rediriger les fichiers qui existent
              RewriteCond %{REQUEST_FILENAME} !-f
              
              # Rediriger vers le r√©pertoire current
              RewriteRule ^(.*)$ /current/\$1 [QSA,L]
          </IfModule>
          EOT;
          
          if (!@file_put_contents('.htaccess', \$htaccess)) {
              echo \"Warning: Failed to update .htaccess\\n\";
          } else {
              echo \" .htaccess updated\\n\";
          }
          
          // 5. Nettoyer les anciens releases (garder les 3 derniers)
          \$releases = glob(\$releasesDir . '/*', GLOB_ONLYDIR);
          if (\$releases) {
              usort(\$releases, function(\$a, \$b) {
                  return filemtime(\$b) - filemtime(\$a);
              });
              
              \$keepCount = 3;
              \$toDelete = array_slice(\$releases, \$keepCount);
              
              foreach (\$toDelete as \$oldRelease) {
                  if (\$oldRelease != \$newRelease) {
                      echo \"Cleaning up: {\$oldRelease}\\n\";
                      recursiveDelete(\$oldRelease);
                  }
              }
              echo \" Old releases cleaned up\\n\";
          }
          
          function recursiveDelete(\$dir) {
              if (!is_dir(\$dir)) return;
              \$files = array_diff(scandir(\$dir), array('.', '..'));
              foreach (\$files as \$file) {
                  \$path = \$dir . '/' . \$file;
                  is_dir(\$path) ? recursiveDelete(\$path) : @unlink(\$path);
              }
              @rmdir(\$dir);
          }
          
          echo \"\\n Deployment completed successfully!\\n\";
          echo \"Current version: \$deployId\\n\";
          ?>" > deploy/switch.php

      # 10. D√©ploiement du script de bascule
      - name: Deploy switch script
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          local-dir: ./deploy/
          server-dir: /
          include: |
            switch.php
          log-level: minimal

      # 11. Ex√©cution de la bascule
      - name: Execute switch
        run: |
          curl -s https://filano.dev/switch.php
          echo "Switch completed"

      # 12. Message de fin
      - name: Deployment completion message
        run: |
          echo "üöÄ Deployment completed successfully!"
          echo "Version ${{ env.APP_VERSION }} has been deployed to filano.dev"
          echo "Deployment ID: ${{ env.DEPLOY_ID }}"
