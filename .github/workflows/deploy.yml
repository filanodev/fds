name: Deploy to Production

on:
  push:
    branches: [ master ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      # 1. Checkout du code
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1

      # 2. Configuration de Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      # 3. Mise √† jour de la version
      - name: Update version
        run: |
          VERSION=$(cat public/version.txt)
          echo "APP_VERSION=$VERSION" >> $GITHUB_ENV
          echo "DEPLOY_ID=$(date +%Y%m%d_%H%M%S)" >> $GITHUB_ENV

      # 4. Installation des d√©pendances
      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      # 5. Build de l'application
      - name: Build application
        env:
          NUXT_PUBLIC_VERSION: ${{ env.APP_VERSION }}
        run: npm run generate

      # 6. Pr√©paration des fichiers (compression)
      - name: Prepare files for deployment
        run: |
          cd .output/public
          find . -type f -name "*.html" -exec gzip -9 -k {} \;
          find . -type f -name "*.js" -exec gzip -9 -k {} \;
          find . -type f -name "*.css" -exec gzip -9 -k {} \;
          find . -type f -name "*.svg" -exec gzip -9 -k {} \;

      # 7. D√©ploiement vers le r√©pertoire de release
      - name: Deploy to release directory
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          local-dir: ./.output/public/
          server-dir: /releases/${{ env.DEPLOY_ID }}/
          exclude: |
            **/.git*
            **/.git*/**
            **/node_modules/**
          log-level: minimal

      # 8. Cr√©ation du script de bascule
      - name: Create switch script
        run: |
          echo "<?php
          // Activer l'affichage des erreurs
          ini_set('display_errors', 1);
          error_reporting(E_ALL);
          
          // V√©rifier les permissions
          echo \"Checking permissions...\\n\";
          \$testDir = '/releases';
          if (!file_exists(\$testDir)) {
              if (!@mkdir(\$testDir, 0755, true)) {
                  echo \"Cannot create directory: \$testDir\\n\";
                  echo \"Error: \" . error_get_last()['message'] . \"\\n\";
              } else {
                  echo \"Created directory: \$testDir\\n\";
              }
          }
          
          // Tester les liens symboliques
          echo \"Testing symlinks...\\n\";
          \$testLink = \$testDir . '/test_link';
          if (@symlink(__FILE__, \$testLink)) {
              echo \"Symlink created successfully\\n\";
              @unlink(\$testLink);
          } else {
              echo \"Cannot create symlinks\\n\";
              echo \"Error: \" . error_get_last()['message'] . \"\\n\";
          }
          
          // Afficher les informations du serveur
          echo \"\\nServer Information:\\n\";
          echo \"PHP version: \" . phpversion() . \"\\n\";
          echo \"User: \" . get_current_user() . \"\\n\";
          echo \"Working directory: \" . getcwd() . \"\\n\";
          echo \"Permissions: \" . substr(sprintf('%o', fileperms(__FILE__)), -4) . \"\\n\";
          
          ?>" > switch.php

      # 9. D√©ploiement du script de bascule
      - name: Deploy switch script
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          local-dir: ./
          server-dir: /
          include: |
            switch.php
          log-level: minimal

      # 10. Ex√©cution de la bascule
      - name: Execute switch
        run: |
          curl -s https://filano.dev/switch.php
          echo "Switch completed"

      # 11. Message de fin
      - name: Deployment completion message
        run: |
          echo "üöÄ Deployment completed successfully!"
          echo "Version ${{ env.APP_VERSION }} has been deployed to fdshop.fr"
          echo "Deployment ID: ${{ env.DEPLOY_ID }}"
