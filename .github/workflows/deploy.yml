name: Deploy to Production

on:
  push:
    branches: [ master ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      # 1. Checkout du code
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1

      # 2. Configuration de Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      # 3. Mise √† jour de la version
      - name: Update version
        run: |
          VERSION=$(cat public/version.txt)
          echo "APP_VERSION=$VERSION" >> $GITHUB_ENV
          echo "DEPLOY_ID=$(date +%Y%m%d_%H%M%S)" >> $GITHUB_ENV

      # 4. Installation des d√©pendances
      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      # 5. Build de l'application
      - name: Build application
        env:
          NUXT_PUBLIC_VERSION: ${{ env.APP_VERSION }}
        run: npm run generate

      # 6. Pr√©paration des fichiers (compression)
      - name: Prepare files for deployment
        run: |
          cd .output/public
          find . -type f -name "*.html" -exec gzip -9 -k {} \;
          find . -type f -name "*.js" -exec gzip -9 -k {} \;
          find . -type f -name "*.css" -exec gzip -9 -k {} \;
          find . -type f -name "*.svg" -exec gzip -9 -k {} \;

      # 7. Cr√©ation du script de configuration
      - name: Create config script
        run: |
          echo "<?php
          // Configuration de base
          define('RELEASES_DIR', '/releases');
          define('CURRENT_LINK', '/current');
          define('MAX_RELEASES', 5);

          // Fonctions utilitaires
          function log_message(\$msg) {
              echo \$msg . \"\\n\";
              flush();
          }

          function ensure_directory(\$dir) {
              if (!file_exists(\$dir)) {
                  if (!@mkdir(\$dir, 0755, true)) {
                      throw new Exception(\"Cannot create directory: \$dir\");
                  }
              }
          }

          function recursive_delete(\$dir) {
              if (!file_exists(\$dir)) return;
              \$files = array_diff(scandir(\$dir), array('.', '..'));
              foreach (\$files as \$file) {
                  \$path = \$dir . '/' . \$file;
                  is_dir(\$path) ? recursive_delete(\$path) : @unlink(\$path);
              }
              @rmdir(\$dir);
          }

          function cleanup_old_releases() {
              \$releases = glob(RELEASES_DIR . '/*', GLOB_ONLYDIR);
              if (count(\$releases) <= MAX_RELEASES) return;
              
              usort(\$releases, function(\$a, \$b) {
                  return filemtime(\$b) - filemtime(\$a);
              });
              
              while (count(\$releases) > MAX_RELEASES) {
                  \$old = array_pop(\$releases);
                  recursive_delete(\$old);
                  log_message(\"Cleaned up old release: \$old\");
              }
          }
          ?>" > config.php

      # 8. Cr√©ation du script de bascule
      - name: Create switch script
        run: |
          echo "<?php
          require_once 'config.php';

          try {
              // 1. V√©rification initiale
              log_message('Starting deployment process...');
              ensure_directory(RELEASES_DIR);

              // 2. V√©rifier le nouveau release
              \$newRelease = RELEASES_DIR . '/${{ env.DEPLOY_ID }}';
              if (!is_dir(\$newRelease)) {
                  throw new Exception('New release directory not found: ' . \$newRelease);
              }

              // 3. Cr√©er le lien symbolique temporaire
              \$tempLink = CURRENT_LINK . '_temp';
              @unlink(\$tempLink);
              
              if (!@symlink(\$newRelease, \$tempLink)) {
                  throw new Exception('Failed to create temporary symlink');
              }
              log_message('Created temporary symlink');

              // 4. Faire la bascule atomique
              if (!@rename(\$tempLink, CURRENT_LINK)) {
                  @unlink(\$tempLink);
                  throw new Exception('Failed to switch symlink');
              }
              log_message('Switched to new release');

              // 5. Mettre √† jour le .htaccess
              \$htaccess = \"
              <IfModule mod_rewrite.c>
                  RewriteEngine On
                  RewriteBase /
                  RewriteCond %{REQUEST_FILENAME} !-f
                  RewriteRule ^(.*)$ /current/\$1 [QSA,L]
              </IfModule>
              \";
              
              if (!@file_put_contents('.htaccess', \$htaccess)) {
                  log_message('Warning: Could not update .htaccess');
              }

              // 6. Nettoyer les anciens releases
              cleanup_old_releases();

              log_message('Deployment completed successfully');

          } catch (Exception \$e) {
              log_message('Error: ' . \$e->getMessage());
              http_response_code(500);
              exit(1);
          }
          ?>" > switch.php

      # 9. D√©ploiement des fichiers de l'application
      - name: Deploy application files
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          local-dir: ./.output/public/
          server-dir: /releases/${{ env.DEPLOY_ID }}/
          exclude: |
            **/.git*
            **/.git*/**
            **/node_modules/**
          log-level: minimal

      # 10. D√©ploiement des scripts
      - name: Deploy switch scripts
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          local-dir: ./
          server-dir: /
          include: |
            switch.php
            config.php
          log-level: minimal

      # 11. Ex√©cution de la bascule
      - name: Execute switch
        run: |
          echo "Executing switch script..."
          RESPONSE=$(curl -s https://filano.dev/switch.php)
          echo "$RESPONSE"
          if [[ "$RESPONSE" != *"completed successfully"* ]]; then
            echo "Switch failed!"
            exit 1
          fi

      # 12. Message de fin
      - name: Deployment completion message
        run: |
          echo "üöÄ Deployment completed successfully!"
          echo "Version ${{ env.APP_VERSION }} has been deployed to filano.dev"
          echo "Deployment ID: ${{ env.DEPLOY_ID }}"
