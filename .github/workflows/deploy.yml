name: Deploy to Production

on:
  push:
    branches: [ master ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      # 1. Checkout du code
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1

      # 2. Configuration de Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      # 3. Mise √† jour de la version
      - name: Update version
        run: |
          VERSION=$(cat public/version.txt)
          echo "APP_VERSION=$VERSION" >> $GITHUB_ENV
          echo "DEPLOY_ID=$(date +%Y%m%d_%H%M%S)" >> $GITHUB_ENV

      # 4. Installation des d√©pendances
      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      # 5. Build de l'application
      - name: Build application
        env:
          NUXT_PUBLIC_VERSION: ${{ env.APP_VERSION }}
        run: npm run generate

      # 6. Pr√©paration des fichiers (compression)
      - name: Prepare files for deployment
        run: |
          cd .output/public
          find . -type f -name "*.html" -exec gzip -9 -k {} \;
          find . -type f -name "*.js" -exec gzip -9 -k {} \;
          find . -type f -name "*.css" -exec gzip -9 -k {} \;
          find . -type f -name "*.svg" -exec gzip -9 -k {} \;

      # 7. D√©ploiement vers le r√©pertoire temporaire
      - name: Deploy to staging directory
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          local-dir: ./.output/public/
          server-dir: /staging_${{ env.DEPLOY_ID }}/
          exclude: |
            **/.git*
            **/.git*/**
            **/node_modules/**
          log-level: minimal

      # 8. Cr√©ation du script de bascule
      - name: Create switch script
        run: |
          echo "<?php
          set_time_limit(300);
          ini_set('memory_limit', '512M');
          
          \$source = '/staging_${{ env.DEPLOY_ID }}';
          \$target = '/';
          \$excluded = array('.', '..', '.htaccess', 'switch.php');
          
          function copyFile(\$src, \$dst) {
              if (@copy(\$src, \$dst)) {
                  return true;
              }
              return false;
          }
          
          function atomicCopy(\$src, \$dst) {
              \$temp = \$dst . '.tmp';
              if (copyFile(\$src, \$temp)) {
                  if (rename(\$temp, \$dst)) {
                      return true;
                  }
                  @unlink(\$temp);
              }
              return false;
          }
          
          function ensureDirectoryExists(\$dir) {
              if (!is_dir(\$dir)) {
                  @mkdir(\$dir, 0755, true);
              }
          }
          
          function listFiles(\$dir, \$prefix = '') {
              \$result = array();
              \$files = @scandir(\$dir);
              if (!\$files) return \$result;
              
              foreach (\$files as \$file) {
                  if (in_array(\$file, \$excluded)) continue;
                  \$path = \$dir . '/' . \$file;
                  \$relativePath = \$prefix . \$file;
                  
                  if (is_dir(\$path)) {
                      \$result = array_merge(
                          \$result,
                          listFiles(\$path, \$relativePath . '/')
                      );
                  } else {
                      \$result[] = \$relativePath;
                  }
              }
              return \$result;
          }
          
          header('Content-Type: text/plain');
          header('X-Accel-Buffering: no');
          
          echo \"Starting deployment process...\\n\";
          ob_flush();
          flush();
          
          \$files = listFiles(\$source);
          \$total = count(\$files);
          \$current = 0;
          
          foreach (\$files as \$file) {
              \$current++;
              \$srcPath = \$source . '/' . \$file;
              \$dstPath = \$target . '/' . \$file;
              
              ensureDirectoryExists(dirname(\$dstPath));
              
              if (atomicCopy(\$srcPath, \$dstPath)) {
                  echo \"[\$current/\$total] Copied: \$file\\n\";
              } else {
                  echo \"[\$current/\$total] Failed to copy: \$file\\n\";
              }
              
              ob_flush();
              flush();
              usleep(10000); // Petit d√©lai pour √©viter la surcharge
          }
          
          // Nettoyage du r√©pertoire de staging en arri√®re-plan
          echo \"Cleaning up staging directory...\\n\";
          function recursiveDelete(\$dir) {
              if (!is_dir(\$dir)) return;
              \$files = array_diff(scandir(\$dir), array('.', '..'));
              
              foreach (\$files as \$file) {
                  \$path = \$dir . '/' . \$file;
                  if (is_dir(\$path)) {
                      recursiveDelete(\$path);
                  } else {
                      @unlink(\$path);
                  }
              }
              @rmdir(\$dir);
          }
          
          // Lancer le nettoyage en arri√®re-plan sur les syst√®mes Unix
          if (function_exists('exec')) {
              exec(sprintf('nohup php -r \\'recursiveDelete(\\"%s\\");\' > /dev/null 2>&1 &', \$source));
          } else {
              recursiveDelete(\$source);
          }
          
          echo \"Deployment completed successfully\\n\";
          ?>" > switch.php

      # 9. D√©ploiement du script de bascule
      - name: Deploy switch script
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          local-dir: ./
          server-dir: /
          include: |
            switch.php
          log-level: minimal

      # 10. Ex√©cution de la bascule
      - name: Execute switch
        run: |
          curl -s https://fdshop.fr/switch.php
          echo "Switch completed"

      # 11. Message de fin
      - name: Deployment completion message
        run: |
          echo "üöÄ Deployment completed successfully!"
          echo "Version ${{ env.APP_VERSION }} has been deployed to fdshop.fr"
          echo "Deployment ID: ${{ env.DEPLOY_ID }}"
